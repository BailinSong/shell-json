on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Deploy

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    steps:
      - id: checkout_code
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          stable: 'true'
          go-version: '1.18' # The Go version to download (if necessary) and use.
      - run: go version
      - run: CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o bin/shell-json-mac ./
      - run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/shell-json-linux ./
      - run: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o bin/shell-json-win.exe ./


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release mac
        id: upload-release-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./bin/shell-json-mac
          asset_name: shell-json-mac
          asset_content_type: application/octet-stream

      - name: Upload Release Linux
        id: upload-release-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./bin/shell-json-linux
          asset_name: shell-json-linux
          asset_content_type: application/octet-stream

      - name: Upload Release Windows
        id: upload-release-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./bin/shell-json-win.exe
          asset_name: shell-json-win.exe
          asset_content_type: application/octet-stream
